Timing a2 without convert
loading annotations into memory...
Done (t=0.60s)
creating index...
index created!
RepVGG Block, identity =  None
RepVGG Block, identity =  None
RepVGG Block, identity =  BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  None
RepVGG Block, identity =  BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  None
RepVGG Block, identity =  BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  None
RepVGG Block, identity =  None
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Use load_from_local loader
CUDA = ?  True
Total parameters =  57189225
/raid/sjx/mmdetection/mmdet/datasets/api_wrappers/coco_api.py:21: UserWarning: mmpycocotools is deprecated. Please install official pycocotools by "pip install pycocotools"
  UserWarning)
Done image [50 / 2000], fps: 4.4 img / s
Done image [100/ 2000], fps: 4.5 img / s
Done image [150/ 2000], fps: 4.5 img / s
Done image [200/ 2000], fps: 4.5 img / s
Done image [250/ 2000], fps: 4.6 img / s
Done image [300/ 2000], fps: 4.6 img / s
Done image [350/ 2000], fps: 4.5 img / s
Done image [400/ 2000], fps: 4.5 img / s
Done image [450/ 2000], fps: 4.6 img / s
Done image [500/ 2000], fps: 4.6 img / s
Done image [550/ 2000], fps: 4.6 img / s
Done image [600/ 2000], fps: 4.6 img / s
Done image [650/ 2000], fps: 4.6 img / s
Done image [700/ 2000], fps: 4.6 img / s
Done image [750/ 2000], fps: 4.6 img / s
Done image [800/ 2000], fps: 4.6 img / s
Done image [850/ 2000], fps: 4.6 img / s
Done image [900/ 2000], fps: 4.6 img / s
Done image [950/ 2000], fps: 4.6 img / s
Done image [1000/ 2000], fps: 4.6 img / s
Done image [1050/ 2000], fps: 4.6 img / s
Done image [1100/ 2000], fps: 4.6 img / s
Done image [1150/ 2000], fps: 4.6 img / s
Done image [1200/ 2000], fps: 4.7 img / s
Done image [1250/ 2000], fps: 4.6 img / s
Done image [1300/ 2000], fps: 4.6 img / s
Done image [1350/ 2000], fps: 4.6 img / s
Done image [1400/ 2000], fps: 4.6 img / s
Done image [1450/ 2000], fps: 4.6 img / s
Done image [1500/ 2000], fps: 4.6 img / s
Done image [1550/ 2000], fps: 4.7 img / s
Done image [1600/ 2000], fps: 4.7 img / s
Done image [1650/ 2000], fps: 4.7 img / s
Done image [1700/ 2000], fps: 4.7 img / s
Done image [1750/ 2000], fps: 4.7 img / s
Done image [1800/ 2000], fps: 4.6 img / s
Done image [1850/ 2000], fps: 4.7 img / s
Done image [1900/ 2000], fps: 4.7 img / s
Done image [1950/ 2000], fps: 4.6 img / s
Done image [2000/ 2000], fps: 4.7 img / s
Overall fps: 4.7 img / s
Writing timings to  timings/timings_repdet_repvgg_a2_repdilatedencoder_yolof_1x_coco_1333x800.csv
true
['backbone', '123.933', '109.572', '24.1232', '379.541']
true
['head', '26.0395', '36.2161', '4.07371', '107.472']
true
['neck', '26.4267', '34.4032', '5.33091', '108.446']
true
['post-proc', '37.9742', '54.4456', '5.66271', '252.786']
true
['simple_test', '214.473', '158.364', '42.5127', '631.488']
Mean runtime (ms):  214.97643381741364 , std=  158.39759744611692
Timing a2 convert rep backbone
loading annotations into memory...
Done (t=0.59s)
creating index...
index created!
RepVGG Block, identity =  None
RepVGG Block, identity =  None
RepVGG Block, identity =  BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  None
RepVGG Block, identity =  BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  None
RepVGG Block, identity =  BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  None
RepVGG Block, identity =  None
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Use load_from_local loader
CUDA = ?  True
Converting repvgg model
repvgg_det_model_convert: Converting repvgg model
deploy param:  stage0.rbr_reparam.weight torch.Size([64, 3, 3, 3]) -0.0047027054
deploy param:  stage0.rbr_reparam.bias torch.Size([64]) -0.2013607
deploy param:  stage1.0.rbr_reparam.weight torch.Size([96, 64, 3, 3]) -0.0035833418
deploy param:  stage1.0.rbr_reparam.bias torch.Size([96]) 0.53966635
deploy param:  stage1.1.rbr_reparam.weight torch.Size([96, 96, 3, 3]) -0.00191147
deploy param:  stage1.1.rbr_reparam.bias torch.Size([96]) 0.61386627
deploy param:  stage2.0.rbr_reparam.weight torch.Size([192, 96, 3, 3]) -0.0021952102
deploy param:  stage2.0.rbr_reparam.bias torch.Size([192]) 0.46766222
deploy param:  stage2.1.rbr_reparam.weight torch.Size([192, 192, 3, 3]) -0.0009445902
deploy param:  stage2.1.rbr_reparam.bias torch.Size([192]) 0.52989894
deploy param:  stage2.2.rbr_reparam.weight torch.Size([192, 192, 3, 3]) -0.0015315999
deploy param:  stage2.2.rbr_reparam.bias torch.Size([192]) 0.2785399
deploy param:  stage2.3.rbr_reparam.weight torch.Size([192, 192, 3, 3]) -0.0015659843
deploy param:  stage2.3.rbr_reparam.bias torch.Size([192]) 0.018701905
deploy param:  stage3.0.rbr_reparam.weight torch.Size([384, 192, 3, 3]) -0.0019747918
deploy param:  stage3.0.rbr_reparam.bias torch.Size([384]) 0.26922426
deploy param:  stage3.1.rbr_reparam.weight torch.Size([384, 384, 3, 3]) -0.0008957489
deploy param:  stage3.1.rbr_reparam.bias torch.Size([384]) 0.06622231
deploy param:  stage3.2.rbr_reparam.weight torch.Size([384, 384, 3, 3]) -0.0014248778
deploy param:  stage3.2.rbr_reparam.bias torch.Size([384]) -0.04731052
deploy param:  stage3.3.rbr_reparam.weight torch.Size([384, 384, 3, 3]) -0.0016993303
deploy param:  stage3.3.rbr_reparam.bias torch.Size([384]) -0.1296653
deploy param:  stage3.4.rbr_reparam.weight torch.Size([384, 384, 3, 3]) -0.0020077506
deploy param:  stage3.4.rbr_reparam.bias torch.Size([384]) -0.049276818
deploy param:  stage3.5.rbr_reparam.weight torch.Size([384, 384, 3, 3]) -0.0023598603
deploy param:  stage3.5.rbr_reparam.bias torch.Size([384]) 0.096906096
deploy param:  stage3.6.rbr_reparam.weight torch.Size([384, 384, 3, 3]) -0.0020265547
deploy param:  stage3.6.rbr_reparam.bias torch.Size([384]) 0.0733452
deploy param:  stage3.7.rbr_reparam.weight torch.Size([384, 384, 3, 3]) -0.001917855
deploy param:  stage3.7.rbr_reparam.bias torch.Size([384]) -0.02639857
deploy param:  stage3.8.rbr_reparam.weight torch.Size([384, 384, 3, 3]) -0.0019959188
deploy param:  stage3.8.rbr_reparam.bias torch.Size([384]) -0.041493505
deploy param:  stage3.9.rbr_reparam.weight torch.Size([384, 384, 3, 3]) -0.0025457446
deploy param:  stage3.9.rbr_reparam.bias torch.Size([384]) -0.21985155
deploy param:  stage3.10.rbr_reparam.weight torch.Size([384, 384, 3, 3]) -0.00232899
deploy param:  stage3.10.rbr_reparam.bias torch.Size([384]) -0.27135
deploy param:  stage3.11.rbr_reparam.weight torch.Size([384, 384, 3, 3]) -0.0021061753
deploy param:  stage3.11.rbr_reparam.bias torch.Size([384]) -0.4003551
deploy param:  stage3.12.rbr_reparam.weight torch.Size([384, 384, 3, 3]) -0.0020385094
deploy param:  stage3.12.rbr_reparam.bias torch.Size([384]) -0.42947626
deploy param:  stage3.13.rbr_reparam.weight torch.Size([384, 384, 3, 3]) -0.0038426234
deploy param:  stage3.13.rbr_reparam.bias torch.Size([384]) -0.19065948
deploy param:  stage4.0.rbr_reparam.weight torch.Size([1024, 384, 3, 3]) -0.00047089643
deploy param:  stage4.0.rbr_reparam.bias torch.Size([1024]) 0.16804627
Total parameters =  53042537
/raid/sjx/mmdetection/mmdet/datasets/api_wrappers/coco_api.py:21: UserWarning: mmpycocotools is deprecated. Please install official pycocotools by "pip install pycocotools"
  UserWarning)
Done image [50 / 2000], fps: 9.4 img / s
Done image [100/ 2000], fps: 7.5 img / s
Done image [150/ 2000], fps: 7.7 img / s
Done image [200/ 2000], fps: 7.5 img / s
Done image [250/ 2000], fps: 7.7 img / s
Done image [300/ 2000], fps: 7.4 img / s
Done image [350/ 2000], fps: 7.5 img / s
Done image [400/ 2000], fps: 7.4 img / s
Done image [450/ 2000], fps: 7.3 img / s
Done image [500/ 2000], fps: 7.4 img / s
Done image [550/ 2000], fps: 7.3 img / s
Done image [600/ 2000], fps: 7.3 img / s
Done image [650/ 2000], fps: 7.4 img / s
Done image [700/ 2000], fps: 7.3 img / s
Done image [750/ 2000], fps: 7.3 img / s
Done image [800/ 2000], fps: 7.5 img / s
Done image [850/ 2000], fps: 7.8 img / s
Done image [900/ 2000], fps: 8.1 img / s
Done image [950/ 2000], fps: 8.1 img / s
Done image [1000/ 2000], fps: 8.1 img / s
Done image [1050/ 2000], fps: 8.1 img / s
Done image [1100/ 2000], fps: 8.0 img / s
Done image [1150/ 2000], fps: 8.0 img / s
Done image [1200/ 2000], fps: 7.9 img / s
Done image [1250/ 2000], fps: 7.9 img / s
Done image [1300/ 2000], fps: 7.9 img / s
Done image [1350/ 2000], fps: 7.8 img / s
Done image [1400/ 2000], fps: 7.8 img / s
Done image [1450/ 2000], fps: 7.8 img / s
Done image [1500/ 2000], fps: 7.8 img / s
Done image [1550/ 2000], fps: 7.7 img / s
Done image [1600/ 2000], fps: 7.7 img / s
Done image [1650/ 2000], fps: 7.8 img / s
Done image [1700/ 2000], fps: 7.7 img / s
Done image [1750/ 2000], fps: 7.7 img / s
Done image [1800/ 2000], fps: 7.7 img / s
Done image [1850/ 2000], fps: 7.7 img / s
Done image [1900/ 2000], fps: 7.7 img / s
Done image [1950/ 2000], fps: 7.7 img / s
Done image [2000/ 2000], fps: 7.7 img / s
Overall fps: 7.7 img / s
Writing timings to  timings/timings_repdet_repvgg_a2_repdilatedencoder_yolof_1x_coco_1333x800.csv
true
['backbone', '61.7966', '70.304', '11.4247', '229.184']
true
['head', '22.3037', '31.6073', '4.1847', '108.063']
true
['neck', '14.0443', '15.7471', '3.46227', '49.857']
true
['post-proc', '31.9776', '51.0654', '3.7972', '202.513']
true
['simple_test', '130.239', '122.063', '26.6108', '402.975']
Mean runtime (ms):  130.7088400226785 , std=  122.51833476552778
Timing a2 convert rep backbone + rep neck
loading annotations into memory...
Done (t=0.61s)
creating index...
index created!
RepVGG Block, identity =  None
RepVGG Block, identity =  None
RepVGG Block, identity =  BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  None
RepVGG Block, identity =  BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  None
RepVGG Block, identity =  BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  None
RepVGG Block, identity =  None
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Use load_from_local loader
CUDA = ?  True
Converting repvgg model
repvgg_det_model_convert: Converting repvgg model
deploy param:  stage0.rbr_reparam.weight torch.Size([64, 3, 3, 3]) -0.0047027054
deploy param:  stage0.rbr_reparam.bias torch.Size([64]) -0.2013607
deploy param:  stage1.0.rbr_reparam.weight torch.Size([96, 64, 3, 3]) -0.0035833418
deploy param:  stage1.0.rbr_reparam.bias torch.Size([96]) 0.53966635
deploy param:  stage1.1.rbr_reparam.weight torch.Size([96, 96, 3, 3]) -0.00191147
deploy param:  stage1.1.rbr_reparam.bias torch.Size([96]) 0.61386627
deploy param:  stage2.0.rbr_reparam.weight torch.Size([192, 96, 3, 3]) -0.0021952102
deploy param:  stage2.0.rbr_reparam.bias torch.Size([192]) 0.46766222
deploy param:  stage2.1.rbr_reparam.weight torch.Size([192, 192, 3, 3]) -0.0009445902
deploy param:  stage2.1.rbr_reparam.bias torch.Size([192]) 0.52989894
deploy param:  stage2.2.rbr_reparam.weight torch.Size([192, 192, 3, 3]) -0.0015315999
deploy param:  stage2.2.rbr_reparam.bias torch.Size([192]) 0.2785399
deploy param:  stage2.3.rbr_reparam.weight torch.Size([192, 192, 3, 3]) -0.0015659843
deploy param:  stage2.3.rbr_reparam.bias torch.Size([192]) 0.018701905
deploy param:  stage3.0.rbr_reparam.weight torch.Size([384, 192, 3, 3]) -0.0019747918
deploy param:  stage3.0.rbr_reparam.bias torch.Size([384]) 0.26922426
deploy param:  stage3.1.rbr_reparam.weight torch.Size([384, 384, 3, 3]) -0.0008957489
deploy param:  stage3.1.rbr_reparam.bias torch.Size([384]) 0.06622231
deploy param:  stage3.2.rbr_reparam.weight torch.Size([384, 384, 3, 3]) -0.0014248778
deploy param:  stage3.2.rbr_reparam.bias torch.Size([384]) -0.04731052
deploy param:  stage3.3.rbr_reparam.weight torch.Size([384, 384, 3, 3]) -0.0016993303
deploy param:  stage3.3.rbr_reparam.bias torch.Size([384]) -0.1296653
deploy param:  stage3.4.rbr_reparam.weight torch.Size([384, 384, 3, 3]) -0.0020077506
deploy param:  stage3.4.rbr_reparam.bias torch.Size([384]) -0.049276818
deploy param:  stage3.5.rbr_reparam.weight torch.Size([384, 384, 3, 3]) -0.0023598603
deploy param:  stage3.5.rbr_reparam.bias torch.Size([384]) 0.096906096
deploy param:  stage3.6.rbr_reparam.weight torch.Size([384, 384, 3, 3]) -0.0020265547
deploy param:  stage3.6.rbr_reparam.bias torch.Size([384]) 0.0733452
deploy param:  stage3.7.rbr_reparam.weight torch.Size([384, 384, 3, 3]) -0.001917855
deploy param:  stage3.7.rbr_reparam.bias torch.Size([384]) -0.02639857
deploy param:  stage3.8.rbr_reparam.weight torch.Size([384, 384, 3, 3]) -0.0019959188
deploy param:  stage3.8.rbr_reparam.bias torch.Size([384]) -0.041493505
deploy param:  stage3.9.rbr_reparam.weight torch.Size([384, 384, 3, 3]) -0.0025457446
deploy param:  stage3.9.rbr_reparam.bias torch.Size([384]) -0.21985155
deploy param:  stage3.10.rbr_reparam.weight torch.Size([384, 384, 3, 3]) -0.00232899
deploy param:  stage3.10.rbr_reparam.bias torch.Size([384]) -0.27135
deploy param:  stage3.11.rbr_reparam.weight torch.Size([384, 384, 3, 3]) -0.0021061753
deploy param:  stage3.11.rbr_reparam.bias torch.Size([384]) -0.4003551
deploy param:  stage3.12.rbr_reparam.weight torch.Size([384, 384, 3, 3]) -0.0020385094
deploy param:  stage3.12.rbr_reparam.bias torch.Size([384]) -0.42947626
deploy param:  stage3.13.rbr_reparam.weight torch.Size([384, 384, 3, 3]) -0.0038426234
deploy param:  stage3.13.rbr_reparam.bias torch.Size([384]) -0.19065948
deploy param:  stage4.0.rbr_reparam.weight torch.Size([1024, 384, 3, 3]) -0.00047089643
deploy param:  stage4.0.rbr_reparam.bias torch.Size([1024]) 0.16804627
deploy param:  lateral_conv_bn.rbr_reparam.weight torch.Size([512, 1024, 3, 3]) -0.00041490913
deploy param:  lateral_conv_bn.rbr_reparam.bias torch.Size([512]) 1.0139216
deploy param:  dilated_encoder_blocks.0.rbr_reparam.weight torch.Size([512, 512, 3, 3]) -0.0001058998
deploy param:  dilated_encoder_blocks.0.rbr_reparam.bias torch.Size([512]) 0.1154296
deploy param:  dilated_encoder_blocks.1.rbr_reparam.weight torch.Size([512, 512, 3, 3]) -0.00019295407
deploy param:  dilated_encoder_blocks.1.rbr_reparam.bias torch.Size([512]) 0.24559996
deploy param:  dilated_encoder_blocks.2.rbr_reparam.weight torch.Size([512, 512, 3, 3]) -0.00018105787
deploy param:  dilated_encoder_blocks.2.rbr_reparam.bias torch.Size([512]) 0.23843114
deploy param:  dilated_encoder_blocks.3.rbr_reparam.weight torch.Size([512, 512, 3, 3]) -0.00016017242
deploy param:  dilated_encoder_blocks.3.rbr_reparam.bias torch.Size([512]) 0.12574252
Total parameters =  53042537
/raid/sjx/mmdetection/mmdet/datasets/api_wrappers/coco_api.py:21: UserWarning: mmpycocotools is deprecated. Please install official pycocotools by "pip install pycocotools"
  UserWarning)
Done image [50 / 2000], fps: 8.0 img / s
Done image [100/ 2000], fps: 7.1 img / s
Done image [150/ 2000], fps: 7.4 img / s
Done image [200/ 2000], fps: 7.1 img / s
Done image [250/ 2000], fps: 7.2 img / s
Done image [300/ 2000], fps: 7.3 img / s
Done image [350/ 2000], fps: 7.2 img / s
Done image [400/ 2000], fps: 7.3 img / s
Done image [450/ 2000], fps: 7.2 img / s
Done image [500/ 2000], fps: 7.2 img / s
Done image [550/ 2000], fps: 7.2 img / s
Done image [600/ 2000], fps: 7.1 img / s
Done image [650/ 2000], fps: 7.2 img / s
Done image [700/ 2000], fps: 7.1 img / s
Done image [750/ 2000], fps: 7.2 img / s
Done image [800/ 2000], fps: 7.1 img / s
Done image [850/ 2000], fps: 7.1 img / s
Done image [900/ 2000], fps: 7.2 img / s
Done image [950/ 2000], fps: 7.2 img / s
Done image [1000/ 2000], fps: 7.2 img / s
Done image [1050/ 2000], fps: 7.4 img / s
Done image [1100/ 2000], fps: 7.3 img / s
Done image [1150/ 2000], fps: 7.3 img / s
Done image [1200/ 2000], fps: 7.3 img / s
Done image [1250/ 2000], fps: 7.3 img / s
Done image [1300/ 2000], fps: 7.3 img / s
Done image [1350/ 2000], fps: 7.3 img / s
Done image [1400/ 2000], fps: 7.3 img / s
Done image [1450/ 2000], fps: 7.3 img / s
Done image [1500/ 2000], fps: 7.3 img / s
Done image [1550/ 2000], fps: 7.3 img / s
Done image [1600/ 2000], fps: 7.3 img / s
Done image [1650/ 2000], fps: 7.3 img / s
Done image [1700/ 2000], fps: 7.3 img / s
Done image [1750/ 2000], fps: 7.3 img / s
Done image [1800/ 2000], fps: 7.3 img / s
Done image [1850/ 2000], fps: 7.3 img / s
Done image [1900/ 2000], fps: 7.3 img / s
Done image [1950/ 2000], fps: 7.3 img / s
Done image [2000/ 2000], fps: 7.3 img / s
Overall fps: 7.3 img / s
Writing timings to  timings/timings_repdet_repvgg_a2_repdilatedencoder_yolof_1x_coco_1333x800.csv
true
['backbone', '60.6508', '69.6456', '12.4074', '229.911']
true
['head', '22.5984', '31.9412', '4.22037', '109.192']
true
['neck', '13.6403', '15.7944', '3.44244', '49.9631']
true
['post-proc', '40.3834', '56.3107', '5.58601', '250.561']
true
['simple_test', '137.395', '123.562', '28.5924', '416.478']
Mean runtime (ms):  137.76907272764947 , std=  123.810647182095
Timing b1g2 without convert
loading annotations into memory...
Done (t=0.67s)
creating index...
index created!
RepVGG Block, identity =  None
RepVGG Block, identity =  None
RepVGG Block, identity =  BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  None
RepVGG Block, identity =  BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  None
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  None
RepVGG Block, identity =  None
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Use load_from_local loader
CUDA = ?  True
Total parameters =  80839977
/raid/sjx/mmdetection/mmdet/datasets/api_wrappers/coco_api.py:21: UserWarning: mmpycocotools is deprecated. Please install official pycocotools by "pip install pycocotools"
  UserWarning)
Done image [50 / 2000], fps: 3.7 img / s
Done image [100/ 2000], fps: 3.7 img / s
Done image [150/ 2000], fps: 3.6 img / s
Done image [200/ 2000], fps: 3.5 img / s
Done image [250/ 2000], fps: 3.5 img / s
Done image [300/ 2000], fps: 3.5 img / s
Done image [350/ 2000], fps: 3.5 img / s
Done image [400/ 2000], fps: 3.5 img / s
Done image [450/ 2000], fps: 3.5 img / s
Done image [500/ 2000], fps: 3.5 img / s
Done image [550/ 2000], fps: 3.5 img / s
Done image [600/ 2000], fps: 3.5 img / s
Done image [650/ 2000], fps: 3.5 img / s
Done image [700/ 2000], fps: 3.5 img / s
Done image [750/ 2000], fps: 3.5 img / s
Done image [800/ 2000], fps: 3.5 img / s
Done image [850/ 2000], fps: 3.5 img / s
Done image [900/ 2000], fps: 3.5 img / s
Done image [950/ 2000], fps: 3.5 img / s
Done image [1000/ 2000], fps: 3.5 img / s
Done image [1050/ 2000], fps: 3.5 img / s
Done image [1100/ 2000], fps: 3.5 img / s
Done image [1150/ 2000], fps: 3.5 img / s
Done image [1200/ 2000], fps: 3.5 img / s
Done image [1250/ 2000], fps: 3.5 img / s
Done image [1300/ 2000], fps: 3.5 img / s
Done image [1350/ 2000], fps: 3.5 img / s
Done image [1400/ 2000], fps: 3.5 img / s
Done image [1450/ 2000], fps: 3.5 img / s
Done image [1500/ 2000], fps: 3.5 img / s
Done image [1550/ 2000], fps: 3.5 img / s
Done image [1600/ 2000], fps: 3.5 img / s
Done image [1650/ 2000], fps: 3.5 img / s
Done image [1700/ 2000], fps: 3.5 img / s
Done image [1750/ 2000], fps: 3.5 img / s
Done image [1800/ 2000], fps: 3.5 img / s
Done image [1850/ 2000], fps: 3.5 img / s
Done image [1900/ 2000], fps: 3.5 img / s
Done image [1950/ 2000], fps: 3.5 img / s
Done image [2000/ 2000], fps: 3.5 img / s
Overall fps: 3.5 img / s
Writing timings to  timings/timings_repdet_repvgg_b1g2_repdilatedencoder_yolof_1x_coco_1333x800.csv
true
['backbone', '192.601', '140.977', '38.9782', '476.612']
true
['head', '23.1002', '33.0239', '4.11336', '107.684']
true
['neck', '25.7968', '32.4205', '5.94358', '109.369']
true
['post-proc', '46.2699', '63.1556', '5.57977', '261.689']
true
['simple_test', '287.871', '201.951', '56.5501', '752.825']
Mean runtime (ms):  288.2355785671389 , std=  202.137926041914
Timing b1g2 convert rep backbone
loading annotations into memory...
Done (t=0.59s)
creating index...
index created!
RepVGG Block, identity =  None
RepVGG Block, identity =  None
RepVGG Block, identity =  BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  None
RepVGG Block, identity =  BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  None
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  None
RepVGG Block, identity =  None
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Use load_from_local loader
CUDA = ?  True
Converting repvgg model
repvgg_det_model_convert: Converting repvgg model
deploy param:  stage0.rbr_reparam.weight torch.Size([64, 3, 3, 3]) -0.0048177983
deploy param:  stage0.rbr_reparam.bias torch.Size([64]) -0.8178284
deploy param:  stage1.0.rbr_reparam.weight torch.Size([128, 64, 3, 3]) -0.0005920869
deploy param:  stage1.0.rbr_reparam.bias torch.Size([128]) -0.024951268
deploy param:  stage1.1.rbr_reparam.weight torch.Size([128, 64, 3, 3]) -0.002671177
deploy param:  stage1.1.rbr_reparam.bias torch.Size([128]) 1.0739856
deploy param:  stage1.2.rbr_reparam.weight torch.Size([128, 128, 3, 3]) -0.0011066343
deploy param:  stage1.2.rbr_reparam.bias torch.Size([128]) 0.47518104
deploy param:  stage1.3.rbr_reparam.weight torch.Size([128, 64, 3, 3]) -0.0060590305
deploy param:  stage1.3.rbr_reparam.bias torch.Size([128]) 0.43179962
deploy param:  stage2.0.rbr_reparam.weight torch.Size([256, 128, 3, 3]) -0.001037484
deploy param:  stage2.0.rbr_reparam.bias torch.Size([256]) 0.24601594
deploy param:  stage2.1.rbr_reparam.weight torch.Size([256, 128, 3, 3]) -0.0011662808
deploy param:  stage2.1.rbr_reparam.bias torch.Size([256]) 0.012080386
deploy param:  stage2.2.rbr_reparam.weight torch.Size([256, 256, 3, 3]) -0.00091002486
deploy param:  stage2.2.rbr_reparam.bias torch.Size([256]) -0.31174362
deploy param:  stage2.3.rbr_reparam.weight torch.Size([256, 128, 3, 3]) -0.0016017868
deploy param:  stage2.3.rbr_reparam.bias torch.Size([256]) -0.18714401
deploy param:  stage2.4.rbr_reparam.weight torch.Size([256, 256, 3, 3]) -0.0012114308
deploy param:  stage2.4.rbr_reparam.bias torch.Size([256]) -0.54787683
deploy param:  stage2.5.rbr_reparam.weight torch.Size([256, 128, 3, 3]) -0.001431176
deploy param:  stage2.5.rbr_reparam.bias torch.Size([256]) -0.06303051
deploy param:  stage3.0.rbr_reparam.weight torch.Size([512, 256, 3, 3]) -0.0014689979
deploy param:  stage3.0.rbr_reparam.bias torch.Size([512]) 0.104317576
deploy param:  stage3.1.rbr_reparam.weight torch.Size([512, 256, 3, 3]) -0.0004531882
deploy param:  stage3.1.rbr_reparam.bias torch.Size([512]) -0.1527814
deploy param:  stage3.2.rbr_reparam.weight torch.Size([512, 512, 3, 3]) -0.0006768664
deploy param:  stage3.2.rbr_reparam.bias torch.Size([512]) -0.040779732
deploy param:  stage3.3.rbr_reparam.weight torch.Size([512, 256, 3, 3]) -0.00126717
deploy param:  stage3.3.rbr_reparam.bias torch.Size([512]) -0.08076039
deploy param:  stage3.4.rbr_reparam.weight torch.Size([512, 512, 3, 3]) -0.0014173631
deploy param:  stage3.4.rbr_reparam.bias torch.Size([512]) -0.2586823
deploy param:  stage3.5.rbr_reparam.weight torch.Size([512, 256, 3, 3]) -0.001980606
deploy param:  stage3.5.rbr_reparam.bias torch.Size([512]) -0.007857807
deploy param:  stage3.6.rbr_reparam.weight torch.Size([512, 512, 3, 3]) -0.0014080585
deploy param:  stage3.6.rbr_reparam.bias torch.Size([512]) -0.18048099
deploy param:  stage3.7.rbr_reparam.weight torch.Size([512, 256, 3, 3]) -0.0016961116
deploy param:  stage3.7.rbr_reparam.bias torch.Size([512]) 0.13219288
deploy param:  stage3.8.rbr_reparam.weight torch.Size([512, 512, 3, 3]) -0.001415992
deploy param:  stage3.8.rbr_reparam.bias torch.Size([512]) -0.24156263
deploy param:  stage3.9.rbr_reparam.weight torch.Size([512, 256, 3, 3]) -0.0022226423
deploy param:  stage3.9.rbr_reparam.bias torch.Size([512]) -0.05876735
deploy param:  stage3.10.rbr_reparam.weight torch.Size([512, 512, 3, 3]) -0.0017180346
deploy param:  stage3.10.rbr_reparam.bias torch.Size([512]) -0.21373527
deploy param:  stage3.11.rbr_reparam.weight torch.Size([512, 256, 3, 3]) -0.0020155748
deploy param:  stage3.11.rbr_reparam.bias torch.Size([512]) -0.09853384
deploy param:  stage3.12.rbr_reparam.weight torch.Size([512, 512, 3, 3]) -0.0017781255
deploy param:  stage3.12.rbr_reparam.bias torch.Size([512]) -0.6006967
deploy param:  stage3.13.rbr_reparam.weight torch.Size([512, 256, 3, 3]) -0.001967369
deploy param:  stage3.13.rbr_reparam.bias torch.Size([512]) -0.37506598
deploy param:  stage3.14.rbr_reparam.weight torch.Size([512, 512, 3, 3]) -0.0016304902
deploy param:  stage3.14.rbr_reparam.bias torch.Size([512]) -0.88348687
deploy param:  stage3.15.rbr_reparam.weight torch.Size([512, 256, 3, 3]) -0.0022077376
deploy param:  stage3.15.rbr_reparam.bias torch.Size([512]) 0.105626196
deploy param:  stage4.0.rbr_reparam.weight torch.Size([2048, 512, 3, 3]) -0.0045731217
deploy param:  stage4.0.rbr_reparam.bias torch.Size([2048]) -4.0636463
Total parameters =  74308777
/raid/sjx/mmdetection/mmdet/datasets/api_wrappers/coco_api.py:21: UserWarning: mmpycocotools is deprecated. Please install official pycocotools by "pip install pycocotools"
  UserWarning)
Done image [50 / 2000], fps: 5.5 img / s
Done image [100/ 2000], fps: 5.7 img / s
Done image [150/ 2000], fps: 5.7 img / s
Done image [200/ 2000], fps: 5.8 img / s
Done image [250/ 2000], fps: 5.6 img / s
Done image [300/ 2000], fps: 5.7 img / s
Done image [350/ 2000], fps: 5.7 img / s
Done image [400/ 2000], fps: 5.7 img / s
Done image [450/ 2000], fps: 5.7 img / s
Done image [500/ 2000], fps: 5.7 img / s
Done image [550/ 2000], fps: 5.7 img / s
Done image [600/ 2000], fps: 5.7 img / s
Done image [650/ 2000], fps: 5.7 img / s
Done image [700/ 2000], fps: 5.7 img / s
Done image [750/ 2000], fps: 5.8 img / s
Done image [800/ 2000], fps: 5.7 img / s
Done image [850/ 2000], fps: 5.7 img / s
Done image [900/ 2000], fps: 5.7 img / s
Done image [950/ 2000], fps: 5.7 img / s
Done image [1000/ 2000], fps: 5.7 img / s
Done image [1050/ 2000], fps: 5.7 img / s
Done image [1100/ 2000], fps: 5.7 img / s
Done image [1150/ 2000], fps: 5.7 img / s
Done image [1200/ 2000], fps: 5.7 img / s
Done image [1250/ 2000], fps: 5.7 img / s
Done image [1300/ 2000], fps: 5.7 img / s
Done image [1350/ 2000], fps: 5.7 img / s
Done image [1400/ 2000], fps: 5.7 img / s
Done image [1450/ 2000], fps: 5.7 img / s
Done image [1500/ 2000], fps: 5.7 img / s
Done image [1550/ 2000], fps: 5.7 img / s
Done image [1600/ 2000], fps: 5.7 img / s
Done image [1650/ 2000], fps: 5.7 img / s
Done image [1700/ 2000], fps: 5.7 img / s
Done image [1750/ 2000], fps: 5.7 img / s
Done image [1800/ 2000], fps: 5.7 img / s
Done image [1850/ 2000], fps: 5.7 img / s
Done image [1900/ 2000], fps: 5.7 img / s
Done image [1950/ 2000], fps: 5.7 img / s
Done image [2000/ 2000], fps: 5.7 img / s
Overall fps: 5.7 img / s
Writing timings to  timings/timings_repdet_repvgg_b1g2_repdilatedencoder_yolof_1x_coco_1333x800.csv
true
['backbone', '98.2135', '88.2457', '17.769', '290.432']
true
['head', '25.8187', '35.2568', '4.10439', '108.801']
true
['neck', '13.6816', '15.1443', '3.88632', '49.7913']
true
['post-proc', '38.1915', '59.7043', '3.80323', '202.564']
true
['simple_test', '176.011', '135.391', '30.6739', '453.443']
Mean runtime (ms):  176.43648786679842 , std=  135.530743547727
Timing b1g2 convert rep backbone + rep neck
loading annotations into memory...
Done (t=0.61s)
creating index...
index created!
RepVGG Block, identity =  None
RepVGG Block, identity =  None
RepVGG Block, identity =  BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  None
RepVGG Block, identity =  BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  None
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  None
RepVGG Block, identity =  None
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Use load_from_local loader
CUDA = ?  True
Converting repvgg model
repvgg_det_model_convert: Converting repvgg model
deploy param:  stage0.rbr_reparam.weight torch.Size([64, 3, 3, 3]) -0.0048177983
deploy param:  stage0.rbr_reparam.bias torch.Size([64]) -0.8178284
deploy param:  stage1.0.rbr_reparam.weight torch.Size([128, 64, 3, 3]) -0.0005920869
deploy param:  stage1.0.rbr_reparam.bias torch.Size([128]) -0.024951268
deploy param:  stage1.1.rbr_reparam.weight torch.Size([128, 64, 3, 3]) -0.002671177
deploy param:  stage1.1.rbr_reparam.bias torch.Size([128]) 1.0739856
deploy param:  stage1.2.rbr_reparam.weight torch.Size([128, 128, 3, 3]) -0.0011066343
deploy param:  stage1.2.rbr_reparam.bias torch.Size([128]) 0.47518104
deploy param:  stage1.3.rbr_reparam.weight torch.Size([128, 64, 3, 3]) -0.0060590305
deploy param:  stage1.3.rbr_reparam.bias torch.Size([128]) 0.43179962
deploy param:  stage2.0.rbr_reparam.weight torch.Size([256, 128, 3, 3]) -0.001037484
deploy param:  stage2.0.rbr_reparam.bias torch.Size([256]) 0.24601594
deploy param:  stage2.1.rbr_reparam.weight torch.Size([256, 128, 3, 3]) -0.0011662808
deploy param:  stage2.1.rbr_reparam.bias torch.Size([256]) 0.012080386
deploy param:  stage2.2.rbr_reparam.weight torch.Size([256, 256, 3, 3]) -0.00091002486
deploy param:  stage2.2.rbr_reparam.bias torch.Size([256]) -0.31174362
deploy param:  stage2.3.rbr_reparam.weight torch.Size([256, 128, 3, 3]) -0.0016017868
deploy param:  stage2.3.rbr_reparam.bias torch.Size([256]) -0.18714401
deploy param:  stage2.4.rbr_reparam.weight torch.Size([256, 256, 3, 3]) -0.0012114308
deploy param:  stage2.4.rbr_reparam.bias torch.Size([256]) -0.54787683
deploy param:  stage2.5.rbr_reparam.weight torch.Size([256, 128, 3, 3]) -0.001431176
deploy param:  stage2.5.rbr_reparam.bias torch.Size([256]) -0.06303051
deploy param:  stage3.0.rbr_reparam.weight torch.Size([512, 256, 3, 3]) -0.0014689979
deploy param:  stage3.0.rbr_reparam.bias torch.Size([512]) 0.104317576
deploy param:  stage3.1.rbr_reparam.weight torch.Size([512, 256, 3, 3]) -0.0004531882
deploy param:  stage3.1.rbr_reparam.bias torch.Size([512]) -0.1527814
deploy param:  stage3.2.rbr_reparam.weight torch.Size([512, 512, 3, 3]) -0.0006768664
deploy param:  stage3.2.rbr_reparam.bias torch.Size([512]) -0.040779732
deploy param:  stage3.3.rbr_reparam.weight torch.Size([512, 256, 3, 3]) -0.00126717
deploy param:  stage3.3.rbr_reparam.bias torch.Size([512]) -0.08076039
deploy param:  stage3.4.rbr_reparam.weight torch.Size([512, 512, 3, 3]) -0.0014173631
deploy param:  stage3.4.rbr_reparam.bias torch.Size([512]) -0.2586823
deploy param:  stage3.5.rbr_reparam.weight torch.Size([512, 256, 3, 3]) -0.001980606
deploy param:  stage3.5.rbr_reparam.bias torch.Size([512]) -0.007857807
deploy param:  stage3.6.rbr_reparam.weight torch.Size([512, 512, 3, 3]) -0.0014080585
deploy param:  stage3.6.rbr_reparam.bias torch.Size([512]) -0.18048099
deploy param:  stage3.7.rbr_reparam.weight torch.Size([512, 256, 3, 3]) -0.0016961116
deploy param:  stage3.7.rbr_reparam.bias torch.Size([512]) 0.13219288
deploy param:  stage3.8.rbr_reparam.weight torch.Size([512, 512, 3, 3]) -0.001415992
deploy param:  stage3.8.rbr_reparam.bias torch.Size([512]) -0.24156263
deploy param:  stage3.9.rbr_reparam.weight torch.Size([512, 256, 3, 3]) -0.0022226423
deploy param:  stage3.9.rbr_reparam.bias torch.Size([512]) -0.05876735
deploy param:  stage3.10.rbr_reparam.weight torch.Size([512, 512, 3, 3]) -0.0017180346
deploy param:  stage3.10.rbr_reparam.bias torch.Size([512]) -0.21373527
deploy param:  stage3.11.rbr_reparam.weight torch.Size([512, 256, 3, 3]) -0.0020155748
deploy param:  stage3.11.rbr_reparam.bias torch.Size([512]) -0.09853384
deploy param:  stage3.12.rbr_reparam.weight torch.Size([512, 512, 3, 3]) -0.0017781255
deploy param:  stage3.12.rbr_reparam.bias torch.Size([512]) -0.6006967
deploy param:  stage3.13.rbr_reparam.weight torch.Size([512, 256, 3, 3]) -0.001967369
deploy param:  stage3.13.rbr_reparam.bias torch.Size([512]) -0.37506598
deploy param:  stage3.14.rbr_reparam.weight torch.Size([512, 512, 3, 3]) -0.0016304902
deploy param:  stage3.14.rbr_reparam.bias torch.Size([512]) -0.88348687
deploy param:  stage3.15.rbr_reparam.weight torch.Size([512, 256, 3, 3]) -0.0022077376
deploy param:  stage3.15.rbr_reparam.bias torch.Size([512]) 0.105626196
deploy param:  stage4.0.rbr_reparam.weight torch.Size([2048, 512, 3, 3]) -0.0045731217
deploy param:  stage4.0.rbr_reparam.bias torch.Size([2048]) -4.0636463
deploy param:  lateral_conv_bn.rbr_reparam.weight torch.Size([512, 2048, 3, 3]) -7.583063e-05
deploy param:  lateral_conv_bn.rbr_reparam.bias torch.Size([512]) 0.3678434
deploy param:  dilated_encoder_blocks.0.rbr_reparam.weight torch.Size([512, 512, 3, 3]) -8.839926e-05
deploy param:  dilated_encoder_blocks.0.rbr_reparam.bias torch.Size([512]) 0.14271155
deploy param:  dilated_encoder_blocks.1.rbr_reparam.weight torch.Size([512, 512, 3, 3]) -4.764071e-05
deploy param:  dilated_encoder_blocks.1.rbr_reparam.bias torch.Size([512]) 0.13264918
deploy param:  dilated_encoder_blocks.2.rbr_reparam.weight torch.Size([512, 512, 3, 3]) -2.5334297e-05
deploy param:  dilated_encoder_blocks.2.rbr_reparam.bias torch.Size([512]) 0.092616424
deploy param:  dilated_encoder_blocks.3.rbr_reparam.weight torch.Size([512, 512, 3, 3]) -4.6915047e-05
deploy param:  dilated_encoder_blocks.3.rbr_reparam.bias torch.Size([512]) 0.10243023
Total parameters =  74308777
/raid/sjx/mmdetection/mmdet/datasets/api_wrappers/coco_api.py:21: UserWarning: mmpycocotools is deprecated. Please install official pycocotools by "pip install pycocotools"
  UserWarning)
Done image [50 / 2000], fps: 5.3 img / s
Done image [100/ 2000], fps: 5.6 img / s
Done image [150/ 2000], fps: 5.5 img / s
Done image [200/ 2000], fps: 5.3 img / s
Done image [250/ 2000], fps: 5.4 img / s
Done image [300/ 2000], fps: 5.5 img / s
Done image [350/ 2000], fps: 5.5 img / s
Done image [400/ 2000], fps: 5.4 img / s
Done image [450/ 2000], fps: 5.4 img / s
Done image [500/ 2000], fps: 5.4 img / s
Done image [550/ 2000], fps: 5.4 img / s
Done image [600/ 2000], fps: 5.4 img / s
Done image [650/ 2000], fps: 5.4 img / s
Done image [700/ 2000], fps: 5.4 img / s
Done image [750/ 2000], fps: 5.4 img / s
Done image [800/ 2000], fps: 5.4 img / s
Done image [850/ 2000], fps: 5.4 img / s
Done image [900/ 2000], fps: 5.4 img / s
Done image [950/ 2000], fps: 5.4 img / s
Done image [1000/ 2000], fps: 5.4 img / s
Done image [1050/ 2000], fps: 5.4 img / s
Done image [1100/ 2000], fps: 5.4 img / s
Done image [1150/ 2000], fps: 5.4 img / s
Done image [1200/ 2000], fps: 5.4 img / s
Done image [1250/ 2000], fps: 5.4 img / s
Done image [1300/ 2000], fps: 5.4 img / s
Done image [1350/ 2000], fps: 5.4 img / s
Done image [1400/ 2000], fps: 5.5 img / s
Done image [1450/ 2000], fps: 5.6 img / s
Done image [1500/ 2000], fps: 5.7 img / s
Done image [1550/ 2000], fps: 5.8 img / s
Done image [1600/ 2000], fps: 5.8 img / s
Done image [1650/ 2000], fps: 5.8 img / s
Done image [1700/ 2000], fps: 5.7 img / s
Done image [1750/ 2000], fps: 5.8 img / s
Done image [1800/ 2000], fps: 5.8 img / s
Done image [1850/ 2000], fps: 5.7 img / s
Done image [1900/ 2000], fps: 5.7 img / s
Done image [1950/ 2000], fps: 5.7 img / s
Done image [2000/ 2000], fps: 5.7 img / s
Overall fps: 5.7 img / s
Writing timings to  timings/timings_repdet_repvgg_b1g2_repdilatedencoder_yolof_1x_coco_1333x800.csv
true
['backbone', '85.8426', '80.2058', '21.3651', '289.188']
true
['head', '25.7228', '35.7616', '4.077', '108.758']
true
['neck', '13.1266', '14.8875', '3.9331', '49.6404']
true
['post-proc', '50.0794', '71.0572', '5.55366', '261.352']
true
['simple_test', '174.875', '140.941', '35.3392', '462.186']
Mean runtime (ms):  175.34403670416214 , std=  141.48398034577173
Timing b1g2 convert rep backbone + rep neck + rep head
loading annotations into memory...
Done (t=0.72s)
creating index...
index created!
RepVGG Block, identity =  None
RepVGG Block, identity =  None
RepVGG Block, identity =  BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  None
RepVGG Block, identity =  BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  None
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  None
RepVGG Block, identity =  None
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
RepVGG Block, identity =  BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
Use load_from_local loader
CUDA = ?  True
Converting repvgg model
repvgg_det_model_convert: Converting repvgg model
deploy param:  stage0.rbr_reparam.weight torch.Size([64, 3, 3, 3]) -0.0048177983
deploy param:  stage0.rbr_reparam.bias torch.Size([64]) -0.8178284
deploy param:  stage1.0.rbr_reparam.weight torch.Size([128, 64, 3, 3]) -0.0005920869
deploy param:  stage1.0.rbr_reparam.bias torch.Size([128]) -0.024951268
deploy param:  stage1.1.rbr_reparam.weight torch.Size([128, 64, 3, 3]) -0.002671177
deploy param:  stage1.1.rbr_reparam.bias torch.Size([128]) 1.0739856
deploy param:  stage1.2.rbr_reparam.weight torch.Size([128, 128, 3, 3]) -0.0011066343
deploy param:  stage1.2.rbr_reparam.bias torch.Size([128]) 0.47518104
deploy param:  stage1.3.rbr_reparam.weight torch.Size([128, 64, 3, 3]) -0.0060590305
deploy param:  stage1.3.rbr_reparam.bias torch.Size([128]) 0.43179962
deploy param:  stage2.0.rbr_reparam.weight torch.Size([256, 128, 3, 3]) -0.001037484
deploy param:  stage2.0.rbr_reparam.bias torch.Size([256]) 0.24601594
deploy param:  stage2.1.rbr_reparam.weight torch.Size([256, 128, 3, 3]) -0.0011662808
deploy param:  stage2.1.rbr_reparam.bias torch.Size([256]) 0.012080386
deploy param:  stage2.2.rbr_reparam.weight torch.Size([256, 256, 3, 3]) -0.00091002486
deploy param:  stage2.2.rbr_reparam.bias torch.Size([256]) -0.31174362
deploy param:  stage2.3.rbr_reparam.weight torch.Size([256, 128, 3, 3]) -0.0016017868
deploy param:  stage2.3.rbr_reparam.bias torch.Size([256]) -0.18714401
deploy param:  stage2.4.rbr_reparam.weight torch.Size([256, 256, 3, 3]) -0.0012114308
deploy param:  stage2.4.rbr_reparam.bias torch.Size([256]) -0.54787683
deploy param:  stage2.5.rbr_reparam.weight torch.Size([256, 128, 3, 3]) -0.001431176
deploy param:  stage2.5.rbr_reparam.bias torch.Size([256]) -0.06303051
deploy param:  stage3.0.rbr_reparam.weight torch.Size([512, 256, 3, 3]) -0.0014689979
deploy param:  stage3.0.rbr_reparam.bias torch.Size([512]) 0.104317576
deploy param:  stage3.1.rbr_reparam.weight torch.Size([512, 256, 3, 3]) -0.0004531882
deploy param:  stage3.1.rbr_reparam.bias torch.Size([512]) -0.1527814
deploy param:  stage3.2.rbr_reparam.weight torch.Size([512, 512, 3, 3]) -0.0006768664
deploy param:  stage3.2.rbr_reparam.bias torch.Size([512]) -0.040779732
deploy param:  stage3.3.rbr_reparam.weight torch.Size([512, 256, 3, 3]) -0.00126717
deploy param:  stage3.3.rbr_reparam.bias torch.Size([512]) -0.08076039
deploy param:  stage3.4.rbr_reparam.weight torch.Size([512, 512, 3, 3]) -0.0014173631
deploy param:  stage3.4.rbr_reparam.bias torch.Size([512]) -0.2586823
deploy param:  stage3.5.rbr_reparam.weight torch.Size([512, 256, 3, 3]) -0.001980606
deploy param:  stage3.5.rbr_reparam.bias torch.Size([512]) -0.007857807
deploy param:  stage3.6.rbr_reparam.weight torch.Size([512, 512, 3, 3]) -0.0014080585
deploy param:  stage3.6.rbr_reparam.bias torch.Size([512]) -0.18048099
deploy param:  stage3.7.rbr_reparam.weight torch.Size([512, 256, 3, 3]) -0.0016961116
deploy param:  stage3.7.rbr_reparam.bias torch.Size([512]) 0.13219288
deploy param:  stage3.8.rbr_reparam.weight torch.Size([512, 512, 3, 3]) -0.001415992
deploy param:  stage3.8.rbr_reparam.bias torch.Size([512]) -0.24156263
deploy param:  stage3.9.rbr_reparam.weight torch.Size([512, 256, 3, 3]) -0.0022226423
deploy param:  stage3.9.rbr_reparam.bias torch.Size([512]) -0.05876735
deploy param:  stage3.10.rbr_reparam.weight torch.Size([512, 512, 3, 3]) -0.0017180346
deploy param:  stage3.10.rbr_reparam.bias torch.Size([512]) -0.21373527
deploy param:  stage3.11.rbr_reparam.weight torch.Size([512, 256, 3, 3]) -0.0020155748
deploy param:  stage3.11.rbr_reparam.bias torch.Size([512]) -0.09853384
deploy param:  stage3.12.rbr_reparam.weight torch.Size([512, 512, 3, 3]) -0.0017781255
deploy param:  stage3.12.rbr_reparam.bias torch.Size([512]) -0.6006967
deploy param:  stage3.13.rbr_reparam.weight torch.Size([512, 256, 3, 3]) -0.001967369
deploy param:  stage3.13.rbr_reparam.bias torch.Size([512]) -0.37506598
deploy param:  stage3.14.rbr_reparam.weight torch.Size([512, 512, 3, 3]) -0.0016304902
deploy param:  stage3.14.rbr_reparam.bias torch.Size([512]) -0.88348687
deploy param:  stage3.15.rbr_reparam.weight torch.Size([512, 256, 3, 3]) -0.0022077376
deploy param:  stage3.15.rbr_reparam.bias torch.Size([512]) 0.105626196
deploy param:  stage4.0.rbr_reparam.weight torch.Size([2048, 512, 3, 3]) -0.0045731217
deploy param:  stage4.0.rbr_reparam.bias torch.Size([2048]) -4.0636463
deploy param:  lateral_conv_bn.rbr_reparam.weight torch.Size([512, 2048, 3, 3]) -7.583063e-05
deploy param:  lateral_conv_bn.rbr_reparam.bias torch.Size([512]) 0.3678434
deploy param:  dilated_encoder_blocks.0.rbr_reparam.weight torch.Size([512, 512, 3, 3]) -8.839926e-05
deploy param:  dilated_encoder_blocks.0.rbr_reparam.bias torch.Size([512]) 0.14271155
deploy param:  dilated_encoder_blocks.1.rbr_reparam.weight torch.Size([512, 512, 3, 3]) -4.764071e-05
deploy param:  dilated_encoder_blocks.1.rbr_reparam.bias torch.Size([512]) 0.13264918
deploy param:  dilated_encoder_blocks.2.rbr_reparam.weight torch.Size([512, 512, 3, 3]) -2.5334297e-05
deploy param:  dilated_encoder_blocks.2.rbr_reparam.bias torch.Size([512]) 0.092616424
deploy param:  dilated_encoder_blocks.3.rbr_reparam.weight torch.Size([512, 512, 3, 3]) -4.6915047e-05
deploy param:  dilated_encoder_blocks.3.rbr_reparam.bias torch.Size([512]) 0.10243023
Total parameters =  74308777
/raid/sjx/mmdetection/mmdet/datasets/api_wrappers/coco_api.py:21: UserWarning: mmpycocotools is deprecated. Please install official pycocotools by "pip install pycocotools"
  UserWarning)
Done image [50 / 2000], fps: 5.1 img / s
Done image [100/ 2000], fps: 5.3 img / s
Done image [150/ 2000], fps: 5.4 img / s
Done image [200/ 2000], fps: 5.4 img / s
Done image [250/ 2000], fps: 5.4 img / s
Done image [300/ 2000], fps: 5.3 img / s
Done image [350/ 2000], fps: 5.3 img / s
Done image [400/ 2000], fps: 5.4 img / s
Done image [450/ 2000], fps: 5.4 img / s
Done image [500/ 2000], fps: 5.4 img / s
Done image [550/ 2000], fps: 5.4 img / s
Done image [600/ 2000], fps: 5.4 img / s
Done image [650/ 2000], fps: 5.4 img / s
Done image [700/ 2000], fps: 5.4 img / s
Done image [750/ 2000], fps: 5.3 img / s
Done image [800/ 2000], fps: 5.3 img / s
Done image [850/ 2000], fps: 5.3 img / s
Done image [900/ 2000], fps: 5.4 img / s
Done image [950/ 2000], fps: 5.3 img / s
Done image [1000/ 2000], fps: 5.3 img / s
Done image [1050/ 2000], fps: 5.4 img / s
Done image [1100/ 2000], fps: 5.4 img / s
Done image [1150/ 2000], fps: 5.4 img / s
Done image [1200/ 2000], fps: 5.4 img / s
Done image [1250/ 2000], fps: 5.4 img / s
Done image [1300/ 2000], fps: 5.4 img / s
Done image [1350/ 2000], fps: 5.4 img / s
Done image [1400/ 2000], fps: 5.4 img / s
Done image [1450/ 2000], fps: 5.4 img / s
Done image [1500/ 2000], fps: 5.4 img / s
Done image [1550/ 2000], fps: 5.4 img / s
Done image [1600/ 2000], fps: 5.4 img / s
Done image [1650/ 2000], fps: 5.4 img / s
Done image [1700/ 2000], fps: 5.4 img / s
Done image [1750/ 2000], fps: 5.4 img / s
Done image [1800/ 2000], fps: 5.4 img / s
Done image [1850/ 2000], fps: 5.4 img / s
Done image [1900/ 2000], fps: 5.4 img / s
Done image [1950/ 2000], fps: 5.4 img / s
Done image [2000/ 2000], fps: 5.4 img / s
Overall fps: 5.3 img / s
Writing timings to  timings/timings_repdet_repvgg_b1g2_repdilatedencoder_yolof_1x_coco_1333x800.csv
true
['backbone', '88.3451', '80.2338', '17.0512', '279.35']
true
['head', '28.8834', '37.6436', '4.13385', '108.467']
true
['neck', '14.1711', '15.6843', '3.86349', '52.6281']
true
['post-proc', '55.265', '72.6353', '5.60225', '257.134']
true
['simple_test', '186.78', '143.958', '34.5875', '457.868']
Mean runtime (ms):  187.10944360133726 , std=  144.14438395003825
